#include "textclassifier.h"

//На вход подаем примеры открытых и шифрованных текстов
//На этапе обучения даем еще и правильный ответ через answer (если answer < 0 - обучение завершилось)
TextClassifier::resultType TextClassifier::Process(const std::string &example, int answer)
{
    TextClassifier::resultType result;
    //Здесь совершается полезная работа:
    //1. Выделяем из example подстроку substr длиной _wordSize, начиная с 0 элемента
    //2. Подставляем substr в хранилища _openText и _encryptText и извлекаем из них
    //n1 - число повторений в _openText и n2 - число повторений в _encryptText
    //3. Если n1 == n2, то наращиваем счетчик просмотренных символов и выделяем
    //новую подстроку уже начиная с 1 символа, а потом повторяем шаг 2
    //Если n1 > n2 - текст открытый, если n1 < n2 - шифрованный
    //4. Если answer >= 0, то мы пока что обучаемся. В таком случае пробегаем строкой substr
    //по всему example и обновляем статистики_openText и _encryptText
    //5. Если answer < 0 - ничего не сканируем и не обновляем.

    //Вам надо будет заполнить поля result
    //result.classNumber - номер класса, который определил классификатор:
    //0 - открытый, 1 - закрытый, -1 - не знаю (дошли до конца example, но решение принять не смогли)
    //result.symbolsToRecognize - число символов из example, которое потребовалось для анализа
    //result.probability - вероятность достоверности вашего ответа (определяем по n1 и n2)
    return result;
}
